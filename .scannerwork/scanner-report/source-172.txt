<?xml version="1.0"?>
<phpunit xmlns="http://schema.phpunit.de/coverage/1.0">
  <file name="Convert.php" path="/Helper">
    <totals>
      <lines total="68" comments="20" code="48" executable="20" executed="20" percent="100.00"/>
      <methods count="4" tested="4" percent="100.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="1" percent="100.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="HiPay\Fullservice\Helper\Convert" start="5" executable="20" executed="20" crap="11">
      <package full="" name="" sub="" category=""/>
      <namespace name="HiPay\Fullservice\Helper"/>
      <method name="toCamelCase" signature="toCamelCase($string)" start="11" end="18" crap="1" executable="5" executed="5" coverage="100"/>
      <method name="arrayKeysToCamelCase" signature="arrayKeysToCamelCase($array)" start="24" end="42" crap="5" executable="10" executed="10" coverage="100"/>
      <method name="toUnderscored" signature="toUnderscored($string)" start="48" end="51" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="_isSimpleSequentialArray" signature="_isSimpleSequentialArray(array $data)" start="59" end="67" crap="4" executable="4" executed="4" coverage="100"/>
    </class>
    <coverage>
      <line nr="13">
        <covered by="HiPay\Tests\Helper\ConvertTest::testToCamelCase"/>
        <covered by="HiPay\Tests\Helper\ConvertTest::testToUnderscored"/>
      </line>
      <line nr="14">
        <covered by="HiPay\Tests\Helper\ConvertTest::testToCamelCase"/>
        <covered by="HiPay\Tests\Helper\ConvertTest::testToUnderscored"/>
      </line>
      <line nr="15">
        <covered by="HiPay\Tests\Helper\ConvertTest::testToCamelCase"/>
        <covered by="HiPay\Tests\Helper\ConvertTest::testToUnderscored"/>
      </line>
      <line nr="16">
        <covered by="HiPay\Tests\Helper\ConvertTest::testToCamelCase"/>
        <covered by="HiPay\Tests\Helper\ConvertTest::testToUnderscored"/>
      </line>
      <line nr="17">
        <covered by="HiPay\Tests\Helper\ConvertTest::testToCamelCase"/>
        <covered by="HiPay\Tests\Helper\ConvertTest::testToUnderscored"/>
      </line>
      <line nr="26">
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testCallRequestHostedPaymentPage with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestNewOrder with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestMaintenanceOperation with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestTransactionInformation with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OperationMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testMapResponseToModel"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\PersonalInformationMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\SecuritySettingsMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testMapResponseToModel"/>
        <covered by="HiPay\Tests\Helper\ConvertTest::testArrayKeysToCamelCase"/>
        <covered by="HiPay\Tests\Fullservice\Mapper\AbstractMapperTest::testCanConstructUsingValidArgument"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\SecureVaultClientTest::testRequestLookupToken"/>
        <covered by="HiPay\Tests\Fullservice\SecureVault\Mapper\PaymentCardTokenMapperTest::testConstruct"/>
      </line>
      <line nr="27">
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testCallRequestHostedPaymentPage with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestNewOrder with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestMaintenanceOperation with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestTransactionInformation with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OperationMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testMapResponseToModel"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\PersonalInformationMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\SecuritySettingsMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testMapResponseToModel"/>
        <covered by="HiPay\Tests\Helper\ConvertTest::testArrayKeysToCamelCase"/>
        <covered by="HiPay\Tests\Fullservice\Mapper\AbstractMapperTest::testCanConstructUsingValidArgument"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\SecureVaultClientTest::testRequestLookupToken"/>
        <covered by="HiPay\Tests\Fullservice\SecureVault\Mapper\PaymentCardTokenMapperTest::testConstruct"/>
      </line>
      <line nr="28">
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testCallRequestHostedPaymentPage with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestNewOrder with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestMaintenanceOperation with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestTransactionInformation with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OperationMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testMapResponseToModel"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\PersonalInformationMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\SecuritySettingsMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testMapResponseToModel"/>
        <covered by="HiPay\Tests\Helper\ConvertTest::testArrayKeysToCamelCase"/>
        <covered by="HiPay\Tests\Fullservice\Mapper\AbstractMapperTest::testCanConstructUsingValidArgument"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\SecureVaultClientTest::testRequestLookupToken"/>
        <covered by="HiPay\Tests\Fullservice\SecureVault\Mapper\PaymentCardTokenMapperTest::testConstruct"/>
      </line>
      <line nr="29">
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testCallRequestHostedPaymentPage with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestNewOrder with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestTransactionInformation with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Helper\ConvertTest::testArrayKeysToCamelCase"/>
        <covered by="HiPay\Tests\Fullservice\Mapper\AbstractMapperTest::testCanConstructUsingValidArgument"/>
      </line>
      <line nr="33">
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testCallRequestHostedPaymentPage with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestNewOrder with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestMaintenanceOperation with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestTransactionInformation with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OperationMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testMapResponseToModel"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\PersonalInformationMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\SecuritySettingsMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testMapResponseToModel"/>
        <covered by="HiPay\Tests\Helper\ConvertTest::testArrayKeysToCamelCase"/>
        <covered by="HiPay\Tests\Fullservice\Mapper\AbstractMapperTest::testCanConstructUsingValidArgument"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\SecureVaultClientTest::testRequestLookupToken"/>
        <covered by="HiPay\Tests\Fullservice\SecureVault\Mapper\PaymentCardTokenMapperTest::testConstruct"/>
      </line>
      <line nr="34">
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testCallRequestHostedPaymentPage with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestNewOrder with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestMaintenanceOperation with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestTransactionInformation with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OperationMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testMapResponseToModel"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\PersonalInformationMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\SecuritySettingsMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testMapResponseToModel"/>
        <covered by="HiPay\Tests\Helper\ConvertTest::testArrayKeysToCamelCase"/>
        <covered by="HiPay\Tests\Fullservice\Mapper\AbstractMapperTest::testCanConstructUsingValidArgument"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\SecureVaultClientTest::testRequestLookupToken"/>
        <covered by="HiPay\Tests\Fullservice\SecureVault\Mapper\PaymentCardTokenMapperTest::testConstruct"/>
      </line>
      <line nr="35">
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testCallRequestHostedPaymentPage with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestNewOrder with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestMaintenanceOperation with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestTransactionInformation with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OperationMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testMapResponseToModel"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\PersonalInformationMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\SecuritySettingsMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testMapResponseToModel"/>
        <covered by="HiPay\Tests\Helper\ConvertTest::testArrayKeysToCamelCase"/>
        <covered by="HiPay\Tests\Fullservice\Mapper\AbstractMapperTest::testCanConstructUsingValidArgument"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\SecureVaultClientTest::testRequestLookupToken"/>
        <covered by="HiPay\Tests\Fullservice\SecureVault\Mapper\PaymentCardTokenMapperTest::testConstruct"/>
      </line>
      <line nr="38">
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Helper\ConvertTest::testArrayKeysToCamelCase"/>
        <covered by="HiPay\Tests\Fullservice\Mapper\AbstractMapperTest::testCanConstructUsingValidArgument"/>
      </line>
      <line nr="39">
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Helper\ConvertTest::testArrayKeysToCamelCase"/>
        <covered by="HiPay\Tests\Fullservice\Mapper\AbstractMapperTest::testCanConstructUsingValidArgument"/>
      </line>
      <line nr="41">
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testCallRequestHostedPaymentPage with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestNewOrder with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestMaintenanceOperation with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestTransactionInformation with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OperationMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testMapResponseToModel"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\PersonalInformationMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\SecuritySettingsMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testMapResponseToModel"/>
        <covered by="HiPay\Tests\Helper\ConvertTest::testArrayKeysToCamelCase"/>
        <covered by="HiPay\Tests\Fullservice\Mapper\AbstractMapperTest::testCanConstructUsingValidArgument"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\SecureVaultClientTest::testRequestLookupToken"/>
        <covered by="HiPay\Tests\Fullservice\SecureVault\Mapper\PaymentCardTokenMapperTest::testConstruct"/>
      </line>
      <line nr="50">
        <covered by="HiPay\Tests\Helper\ConvertTest::testToUnderscored"/>
      </line>
      <line nr="61">
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testCallRequestHostedPaymentPage with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestNewOrder with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestTransactionInformation with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Helper\ConvertTest::testArrayKeysToCamelCase"/>
        <covered by="HiPay\Tests\Fullservice\Mapper\AbstractMapperTest::testCanConstructUsingValidArgument"/>
      </line>
      <line nr="62">
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testCallRequestHostedPaymentPage with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestNewOrder with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestTransactionInformation with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Helper\ConvertTest::testArrayKeysToCamelCase"/>
        <covered by="HiPay\Tests\Fullservice\Mapper\AbstractMapperTest::testCanConstructUsingValidArgument"/>
      </line>
      <line nr="63">
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testCallRequestHostedPaymentPage with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestNewOrder with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Client\GatewayClientTest::testRequestTransactionInformation with data set #0"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\OrderMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Helper\ConvertTest::testArrayKeysToCamelCase"/>
        <covered by="HiPay\Tests\Fullservice\Mapper\AbstractMapperTest::testCanConstructUsingValidArgument"/>
      </line>
      <line nr="66">
        <covered by="HiPay\Tests\Fullservice\Gateway\Mapper\TransactionMapperTest::testConstruct"/>
        <covered by="HiPay\Tests\Helper\ConvertTest::testArrayKeysToCamelCase"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">HiPay</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Fullservice</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Helper</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Convert</token>
      </line>
      <line no="6">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="7">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="8">
        <token name="T_DOC_COMMENT">     * @param string $string</token>
      </line>
      <line no="9">
        <token name="T_DOC_COMMENT">     * @return string</token>
      </line>
      <line no="10">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="11">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">toCamelCase</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$string</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="12">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="13">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$string</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="14">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_replace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'_'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' '</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$string</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="15">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ucwords</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$string</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="16">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_replace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' '</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$string</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="17">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">lcfirst</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$string</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="18">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="19"/>
      <line no="20">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="21">
        <token name="T_DOC_COMMENT">     * @param array&lt;string, mixed&gt; $array</token>
      </line>
      <line no="22">
        <token name="T_DOC_COMMENT">     * @return array&lt;string, mixed&gt;</token>
      </line>
      <line no="23">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="24">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">arrayKeysToCamelCase</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$array</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="25">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="26">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$newArray</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="27">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">_isSimpleSequentialArray</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="29">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">arrayKeysToCamelCase</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="31"/>
      <line no="32">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">//Don't process, if not underscore is present</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strpos</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"_"</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="34">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$newArray</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="35">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONTINUE">continue</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="36">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="37"/>
      <line no="38">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">lcfirst</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">str_replace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' '</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ucwords</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">str_replace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'_'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' '</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="39">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$newArray</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="41">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$newArray</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="43"/>
      <line no="44">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="45">
        <token name="T_DOC_COMMENT">     * @param string $string</token>
      </line>
      <line no="46">
        <token name="T_DOC_COMMENT">     * @return string</token>
      </line>
      <line no="47">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="48">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">toUnderscored</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$string</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">preg_replace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/(.)([A-Z0-9])/'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"$1_$2"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$string</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="51">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="52"/>
      <line no="53">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="54">
        <token name="T_DOC_COMMENT">     * Check if the array is a simple(one dimensional and not nested) and a sequential(non-associative) array</token>
      </line>
      <line no="55">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="56">
        <token name="T_DOC_COMMENT">     * @param array&lt;mixed, mixed&gt; $data</token>
      </line>
      <line no="57">
        <token name="T_DOC_COMMENT">     * @return bool</token>
      </line>
      <line no="58">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">_isSimpleSequentialArray</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="63">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="68">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="69"/>
    </source>
  </file>
</phpunit>
